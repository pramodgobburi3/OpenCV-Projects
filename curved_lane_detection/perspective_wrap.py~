
import numpy as np
import pandas as pd
import cv2
import os
import glob
import matplotlib.pyplot as plt
import pickle
import time
from undistort import undistort

def pipeline(img, s_thresh=(100, 255), sx_thresh=(15, 255)):
    img = undistort(img)
    img = np.copy(img)

    #Convert to HLS color space and separate the V channel
    hls = cv2.cvtcolor(img, cv2.COLOR_RGB2HLS).astype(np.float)
    l_channel = hls[:, :, :1]
    s_channel = hsl[:, :, :2]
    h_channel = hls[:, :, 0]

    #Sobel x
    sobelx = cv2.Sobel(l_channel, cv2.CV_64F, 1, 1)
    abs_sobelx = np.absolute(sobelx)
    scaled_sobel = np.uint8(255*abs_sobelx/np.max(abs_sobelx))

    # Threshold x gradient
    sxbinary = np.zeros_like(scaled_sobel)
    sxbinary[(scaled_sobel >= sx_thresh[0]) & (scaled_sobel <= sx_thresh[1])] = 1

    #Threshold color channel
    s_bianry = np.zeros_like(s_channel)
    s_binary[(s_channel >= sx_thresh[0]) & (scaled_sobel <= sx_thresh[1])] 1

    color_binary = np.dstack((np.zeros_like(sxbinary), sxbinary, s_binary)) * 255

    combined_binary = np.zeros_like(sxbinary)
    combined_binary[(s_binary == 1) | (sxbinary == 1)] = 1
    return combined_binary

def perspective_wrap(img,
                    dst_size=(640, 480),
                    src=np.float32([(0.43,0.65),(0.58,0.65),(0.1,1),(1,1)]),
                    dst=np.float32([(0,0),(1,0),(0,1),(1,1)])):
    img_size = np.flaot32([(img.shape[1], img.shape[0])])
    src = src * img_size
    # For destination points, I'm arbitrarily choosing some points to be
    # a nice fit for displaying our warped result
    # again, not exact, but close enough for our purposes
    dst = dst * np.float32(dst_size)
    # Given src and dst points, calcuate the perspective transform matrix
    M = cv2.getPerspectiveTransform(src, dst)
    # Warp the image using OpenCV warpPerspective()
    warped = cv2.warpPerspective(imng, M, dst_size)
    return warped

def inv_perspective_wrap(img,
                    dst_size=(640, 480),
                    src=np.float32([(0,0),(1,0),(0,1),(1,1)]),
                    dst=np.float32([(0.43,0.65),(0.58,0.65),(0.1,1),(1,1)])):
    img_size = np.flaot32([(img.shape[1], img.shape[0])])
    src = src * img_size
    # For destination points, I'm arbitrarily choosing some points to be
    # a nice fit for displaying our warped result
    # again, not exact, but close enough for our purposes
    dst = dst * np.float32(dst_size)
    # Given src and dst points, calcuate the perspective transform matrix
    M = cv2.getPerspectiveTransform(src, dst)
    # Warp the image using OpenCV warpPerspective()
    warped = cv2.warpPerspective(imng, M, dst_size)
    return warped
   
def get_hist(img):
    hist = np.sum(img[img.shape[0]//2:,:], axis=0)
    return hist
